{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tuong\\\\Documents\\\\projects\\\\nodejs\\\\react-native\\\\React-Native\\\\app\\\\components\\\\AppPicker.js\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport React, { useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { FlatList, TouchableWithoutFeedback } from 'react-native-gesture-handler';\nimport colors from \"../config/colors\";\nimport AppText from \"./AppText\";\nimport PickerItem from \"./PickerItem\";\n\nfunction AppPicker(_ref) {\n  var _this = this;\n\n  var icon = _ref.icon,\n      items = _ref.items,\n      selectedItem = _ref.selectedItem,\n      _ref$numberOfColumns = _ref.numberOfColumns,\n      numberOfColumns = _ref$numberOfColumns === void 0 ? 1 : _ref$numberOfColumns,\n      _ref$PickerItemCompon = _ref.PickerItemComponent,\n      PickerItemComponent = _ref$PickerItemCompon === void 0 ? PickerItem : _ref$PickerItemCompon,\n      placeholder = _ref.placeholder,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? '100%' : _ref$width,\n      onSelectItem = _ref.onSelectItem;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      setModalVisible(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: [styles.container, {\n      width: width\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, icon && React.createElement(MaterialCommunityIcons, {\n    name: icon,\n    size: 20,\n    color: colors.medium,\n    style: styles.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }), selectedItem ? React.createElement(AppText, {\n    style: styles.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, selectedItem.label) : React.createElement(AppText, {\n    style: styles.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, placeholder), React.createElement(MaterialCommunityIcons, {\n    name: \"chevron-down\",\n    size: 20,\n    color: colors.medium,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }))), React.createElement(Modal, {\n    visible: modalVisible,\n    animationType: \"slide\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, React.createElement(Button, {\n    title: \"Close\",\n    onPress: function onPress() {\n      setModalVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), React.createElement(FlatList, {\n    data: items,\n    keyExtractor: function keyExtractor(item) {\n      return item.value.toString();\n    },\n    numColumns: numberOfColumns,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(PickerItemComponent, {\n        item: item,\n        onPress: function onPress() {\n          setModalVisible(false);\n          onSelectItem(item);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.light,\n    borderRadius: 25,\n    flexDirection: 'row',\n    padding: 15,\n    marginVertical: 10,\n    alignItems: 'center'\n  },\n  icon: {\n    margin: 10\n  },\n  text: {\n    flex: 1\n  },\n  placeholder: {\n    color: colors.medium,\n    flex: 1\n  }\n});\nexport default AppPicker;","map":{"version":3,"sources":["C:/Users/Tuong/Documents/projects/nodejs/react-native/React-Native/app/components/AppPicker.js"],"names":["MaterialCommunityIcons","React","useState","FlatList","TouchableWithoutFeedback","colors","AppText","PickerItem","AppPicker","icon","items","selectedItem","numberOfColumns","PickerItemComponent","placeholder","width","onSelectItem","modalVisible","setModalVisible","styles","container","medium","label","item","value","toString","StyleSheet","create","backgroundColor","light","borderRadius","flexDirection","padding","marginVertical","alignItems","margin","text","flex","color"],"mappings":"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","sourcesContent":["import { MaterialCommunityIcons } from '@expo/vector-icons';\r\nimport React, { useState } from 'react';\r\nimport { Button, Modal, StyleSheet, View } from 'react-native';\r\nimport {\r\n  FlatList,\r\n  TouchableWithoutFeedback,\r\n} from 'react-native-gesture-handler';\r\nimport colors from '../config/colors';\r\nimport AppText from './AppText';\r\nimport PickerItem from './PickerItem';\r\n\r\nfunction AppPicker({\r\n  icon,\r\n  items,\r\n  selectedItem,\r\n  numberOfColumns = 1,\r\n  PickerItemComponent = PickerItem,\r\n  placeholder,\r\n  width = '100%',\r\n  onSelectItem,\r\n}) {\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  return (\r\n    <>\r\n      <TouchableWithoutFeedback\r\n        onPress={() => {\r\n          setModalVisible(true);\r\n        }}\r\n      >\r\n        <View style={[styles.container, { width }]}>\r\n          {icon && (\r\n            <MaterialCommunityIcons\r\n              name={icon}\r\n              size={20}\r\n              color={colors.medium}\r\n              style={styles.icon}\r\n            />\r\n          )}\r\n\r\n          {selectedItem ? (\r\n            <AppText style={styles.placeholder}>{selectedItem.label}</AppText>\r\n          ) : (\r\n            <AppText style={styles.placeholder}>{placeholder}</AppText>\r\n          )}\r\n\r\n          <MaterialCommunityIcons\r\n            name=\"chevron-down\"\r\n            size={20}\r\n            color={colors.medium}\r\n          />\r\n        </View>\r\n      </TouchableWithoutFeedback>\r\n      <Modal visible={modalVisible} animationType=\"slide\">\r\n        <Button\r\n          title=\"Close\"\r\n          onPress={() => {\r\n            setModalVisible(false);\r\n          }}\r\n        />\r\n        <FlatList\r\n          data={items}\r\n          keyExtractor={(item) => {\r\n            return item.value.toString();\r\n          }}\r\n          numColumns={numberOfColumns}\r\n          renderItem={({ item }) => {\r\n            return (\r\n              <PickerItemComponent\r\n                item={item}\r\n                onPress={() => {\r\n                  setModalVisible(false);\r\n                  onSelectItem(item);\r\n                }}\r\n              />\r\n            );\r\n          }}\r\n        />\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: colors.light,\r\n    borderRadius: 25,\r\n    flexDirection: 'row',\r\n    padding: 15,\r\n    marginVertical: 10,\r\n    alignItems: 'center',\r\n  },\r\n  icon: {\r\n    margin: 10,\r\n  },\r\n  text: {\r\n    flex: 1,\r\n  },\r\n  placeholder: {\r\n    color: colors.medium,\r\n    flex: 1,\r\n  },\r\n});\r\n\r\nexport default AppPicker;\r\n"]},"metadata":{},"sourceType":"module"}