{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useState } from 'react';\nimport * as Location from 'expo-location';\nexport default (function () {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var requestPermission = function requestPermission() {\n    var result, _await$Location$getCu, _await$Location$getCu2, latitude, longitude;\n\n    return _regeneratorRuntime.async(function requestPermission$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Location.requestPermissionsAsync());\n\n          case 2:\n            result = _context.sent;\n\n            if (result.granted) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 5:\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync());\n\n          case 7:\n            _await$Location$getCu = _context.sent;\n            _await$Location$getCu2 = _await$Location$getCu.coords;\n            latitude = _await$Location$getCu2.latitude;\n            longitude = _await$Location$getCu2.longitude;\n            setLocation({\n              latitude: latitude,\n              longitude: longitude\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    requestPermission();\n  }, []);\n  return location;\n});","map":{"version":3,"sources":["C:/Users/Tuong/Documents/projects/nodejs/react-native/React-Native/app/hooks/useLocation.js"],"names":["useEffect","useState","Location","location","setLocation","requestPermission","requestPermissionsAsync","result","granted","getCurrentPositionAsync","coords","latitude","longitude"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AAEA,gBAAe,YAAM;AAAA,kBACaD,QAAQ,EADrB;AAAA;AAAA,MACZE,QADY;AAAA,MACFC,WADE;;AAGnB,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACHH,QAAQ,CAACI,uBAAT,EADG;;AAAA;AAClBC,YAAAA,MADkB;;AAAA,gBAEnBA,MAAM,CAACC,OAFY;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,6CAKdN,QAAQ,CAACO,uBAAT,EALc;;AAAA;AAAA;AAAA,2DAItBC,MAJsB;AAIZC,YAAAA,QAJY,0BAIZA,QAJY;AAIFC,YAAAA,SAJE,0BAIFA,SAJE;AAMxBR,YAAAA,WAAW,CAAC;AAAEO,cAAAA,QAAQ,EAARA,QAAF;AAAYC,cAAAA,SAAS,EAATA;AAAZ,aAAD,CAAX;;AANwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AASAZ,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAOF,QAAP;AACD,CAjBD","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport * as Location from 'expo-location';\r\n\r\nexport default () => {\r\n  const [location, setLocation] = useState();\r\n\r\n  const requestPermission = async () => {\r\n    const result = await Location.requestPermissionsAsync();\r\n    if (!result.granted) return;\r\n    const {\r\n      coords: { latitude, longitude },\r\n    } = await Location.getCurrentPositionAsync();\r\n    setLocation({ latitude, longitude });\r\n  };\r\n\r\n  useEffect(() => {\r\n    requestPermission();\r\n  }, []);\r\n\r\n  return location;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}